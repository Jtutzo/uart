// Generated by CoffeeScript 1.12.2

/*
 * Global varible for encoding to littleEndian
 */

(function() {
  var isLittleEndian, littleEndian, toBytes, toBytesBigEndian, toBytesLittleEndian, toNum, toNumBigEndian, toNumLittleEndian;

  littleEndian = true;


  /*
   * Update encoding/decoding convertion
   * @param value
   */

  isLittleEndian = function(value) {
    return littleEndian = value ? true : false;
  };


  /*
   * Convert number to bytes array
   * @param num
   * @param syze (array)
   * @return array
   * @exception Illegal syze
   */

  toBytes = function(num, syze) {
    if (littleEndian) {
      return toBytesLittleEndian(num, syze);
    } else {
      return toBytesBigEndian(num, syze);
    }
  };


  /*
   * Convert bytes array to number
   * @param bytes array
   * @return number
   */

  toNum = function(bytes) {
    if (littleEndian) {
      return toNumLittleEndian(bytes);
    } else {
      return toNumBigEndian(bytes);
    }
  };


  /*
   * Convert number to bytes array (encoding to littleEndian)
   * @param num
   * @param syze (array)
   * @return array
   * @exception Illegal syze
   */

  toBytesLittleEndian = function(num, syze) {
    var bytes, i, j;
    bytes = [];
    i = syze && typeof syze === 'number' ? syze : 8;
    j = i - 1;
    while (true) {
      bytes[j - (--i)] = num & 255;
      num = num >> 8;
      if (!i) {
        break;
      }
    }
    if (num !== 0) {
      throw new Error("Illegal syze.");
    }
    return bytes;
  };


  /*
   * Convert number to bytes array (encoding to bigEndian)
   * @param num
   * @param syze (array)
   * @return array
   * @exception Illegal syze
   */

  toBytesBigEndian = function(num, syze) {
    var bytes, i;
    bytes = [];
    i = syze && typeof syze === 'number' ? syze : 8;
    while (true) {
      bytes[--i] = num & 255;
      num = num >> 8;
      if (!i) {
        break;
      }
    }
    if (num !== 0) {
      throw new Error("Illegal syze.");
    }
    return bytes;
  };


  /*
   * Convert bytes array to number (decoding to littleEndian)
   * @param bytes array
   * @return number
   */

  toNumLittleEndian = function(bytes) {
    var i, val;
    val = 0;
    i = bytes.length - 1;
    while (true) {
      --i;
      if (i > 0) {
        val = val << 8;
        if (i >= 0) {
          break;
        }
      }
    }
    return val;
  };


  /*
   * Convert bytes array to number (decoding to bigEndian)
   * @param bytes array
   * @return number
   */

  toNumBigEndian = function(bytes) {
    var byte, i, k, len, val;
    val = 0;
    for (i = k = 0, len = bytes.length; k < len; i = ++k) {
      byte = bytes[i];
      if (i > bytes.length - 1) {
        val = val << 8;
      }
    }
    return val;
  };

  module.exports.isLittleEndian = isLittleEndian;

  module.exports.toBytes = toBytes;

  module.exports.toNum = toNum;

}).call(this);
